using System.Collections.Generic;

namespace OledI2cCore
{
    public class Oled_Font_5x7 : IFont
    {
        private static readonly Dictionary<char, byte[]> CharDic = new Dictionary<char, byte[]>();
        static Oled_Font_5x7()
        {
            CharDic.Add(' ', new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00 });
            CharDic.Add('!', new byte[] { 0x00, 0x00, 0x5F, 0x00, 0x00 });
            CharDic.Add('"', new byte[] { 0x00, 0x07, 0x00, 0x07, 0x00 });
            CharDic.Add('#', new byte[] { 0x14, 0x7F, 0x14, 0x7F, 0x14 });
            CharDic.Add('$', new byte[] { 0x24, 0x2A, 0x7F, 0x2A, 0x12 });
            CharDic.Add('%', new byte[] { 0x23, 0x13, 0x08, 0x64, 0x62 });
            CharDic.Add('&', new byte[] { 0x36, 0x49, 0x55, 0x22, 0x50 });
            CharDic.Add('\'', new byte[] { 0x00, 0x05, 0x03, 0x00, 0x00 });
            CharDic.Add('(', new byte[] { 0x00, 0x1C, 0x22, 0x41, 0x00 });
            CharDic.Add(')', new byte[] { 0x00, 0x41, 0x22, 0x1C, 0x00 });
            CharDic.Add('*', new byte[] { 0x08, 0x2A, 0x1C, 0x2A, 0x08 });
            CharDic.Add('+', new byte[] { 0x08, 0x08, 0x3E, 0x08, 0x08 });
            CharDic.Add(',', new byte[] { 0x00, 0x50, 0x30, 0x00, 0x00 });
            CharDic.Add('-', new byte[] { 0x08, 0x08, 0x08, 0x08, 0x08 });
            CharDic.Add('.', new byte[] { 0x00, 0x60, 0x60, 0x00, 0x00 });
            CharDic.Add('/', new byte[] { 0x20, 0x10, 0x08, 0x04, 0x02 });
            CharDic.Add('0', new byte[] { 0x3E, 0x51, 0x49, 0x45, 0x3E });
            CharDic.Add('1', new byte[] { 0x00, 0x42, 0x7F, 0x40, 0x00 });
            CharDic.Add('2', new byte[] { 0x42, 0x61, 0x51, 0x49, 0x46 });
            CharDic.Add('3', new byte[] { 0x21, 0x41, 0x45, 0x4B, 0x31 });
            CharDic.Add('4', new byte[] { 0x18, 0x14, 0x12, 0x7F, 0x10 });
            CharDic.Add('5', new byte[] { 0x27, 0x45, 0x45, 0x45, 0x39 });
            CharDic.Add('6', new byte[] { 0x3C, 0x4A, 0x49, 0x49, 0x30 });
            CharDic.Add('7', new byte[] { 0x01, 0x71, 0x09, 0x05, 0x03 });
            CharDic.Add('8', new byte[] { 0x36, 0x49, 0x49, 0x49, 0x36 });
            CharDic.Add('9', new byte[] { 0x06, 0x49, 0x49, 0x29, 0x1E });
            CharDic.Add(':', new byte[] { 0x00, 0x36, 0x36, 0x00, 0x00 });
            CharDic.Add(';', new byte[] { 0x00, 0x56, 0x36, 0x00, 0x00 });
            CharDic.Add('<', new byte[] { 0x00, 0x08, 0x14, 0x22, 0x41 });
            CharDic.Add('=', new byte[] { 0x14, 0x14, 0x14, 0x14, 0x14 });
            CharDic.Add('>', new byte[] { 0x41, 0x22, 0x14, 0x08, 0x00 });
            CharDic.Add('?', new byte[] { 0x02, 0x01, 0x51, 0x09, 0x06 });
            CharDic.Add('@', new byte[] { 0x32, 0x49, 0x79, 0x41, 0x3E });
            CharDic.Add('A', new byte[] { 0x7E, 0x11, 0x11, 0x11, 0x7E });
            CharDic.Add('B', new byte[] { 0x7F, 0x49, 0x49, 0x49, 0x36 });
            CharDic.Add('C', new byte[] { 0x3E, 0x41, 0x41, 0x41, 0x22 });
            CharDic.Add('D', new byte[] { 0x7F, 0x41, 0x41, 0x22, 0x1C });
            CharDic.Add('E', new byte[] { 0x7F, 0x49, 0x49, 0x49, 0x41 });
            CharDic.Add('F', new byte[] { 0x7F, 0x09, 0x09, 0x01, 0x01 });
            CharDic.Add('G', new byte[] { 0x3E, 0x41, 0x41, 0x51, 0x32 });
            CharDic.Add('H', new byte[] { 0x7F, 0x08, 0x08, 0x08, 0x7F });
            CharDic.Add('I', new byte[] { 0x00, 0x41, 0x7F, 0x41, 0x00 });
            CharDic.Add('J', new byte[] { 0x20, 0x40, 0x41, 0x3F, 0x01 });
            CharDic.Add('K', new byte[] { 0x7F, 0x08, 0x14, 0x22, 0x41 });
            CharDic.Add('L', new byte[] { 0x7F, 0x40, 0x40, 0x40, 0x40 });
            CharDic.Add('M', new byte[] { 0x7F, 0x02, 0x04, 0x02, 0x7F });
            CharDic.Add('N', new byte[] { 0x7F, 0x04, 0x08, 0x10, 0x7F });
            CharDic.Add('O', new byte[] { 0x3E, 0x41, 0x41, 0x41, 0x3E });
            CharDic.Add('P', new byte[] { 0x7F, 0x09, 0x09, 0x09, 0x06 });
            CharDic.Add('Q', new byte[] { 0x3E, 0x41, 0x51, 0x21, 0x5E });
            CharDic.Add('R', new byte[] { 0x7F, 0x09, 0x19, 0x29, 0x46 });
            CharDic.Add('S', new byte[] { 0x46, 0x49, 0x49, 0x49, 0x31 });
            CharDic.Add('T', new byte[] { 0x01, 0x01, 0x7F, 0x01, 0x01 });
            CharDic.Add('U', new byte[] { 0x3F, 0x40, 0x40, 0x40, 0x3F });
            CharDic.Add('V', new byte[] { 0x1F, 0x20, 0x40, 0x20, 0x1F });
            CharDic.Add('W', new byte[] { 0x7F, 0x20, 0x18, 0x20, 0x7F });
            CharDic.Add('X', new byte[] { 0x63, 0x14, 0x08, 0x14, 0x63 });
            CharDic.Add('Y', new byte[] { 0x03, 0x04, 0x78, 0x04, 0x03 });
            CharDic.Add('Z', new byte[] { 0x61, 0x51, 0x49, 0x45, 0x43 });
            CharDic.Add('Ä', new byte[] { 0x7D, 0x12, 0x12, 0x7D, 0x00 });
            CharDic.Add('Ö', new byte[] { 0x3D, 0x42, 0x42, 0x42, 0x3D });
            CharDic.Add('Ü', new byte[] { 0x3D, 0x40, 0x40, 0x40, 0x3D });
            CharDic.Add('[', new byte[] { 0x00, 0x00, 0x7F, 0x41, 0x41 });
            CharDic.Add('\\', new byte[] { 0x02, 0x04, 0x08, 0x10, 0x20 });
            CharDic.Add(']', new byte[] { 0x41, 0x41, 0x7F, 0x00, 0x00 });
            CharDic.Add('^', new byte[] { 0x04, 0x02, 0x01, 0x02, 0x04 });
            CharDic.Add('_', new byte[] { 0x40, 0x40, 0x40, 0x40, 0x40 });
            CharDic.Add('`', new byte[] { 0x00, 0x01, 0x02, 0x04, 0x00 });
            CharDic.Add('a', new byte[] { 0x20, 0x54, 0x54, 0x54, 0x78 });
            CharDic.Add('b', new byte[] { 0x7F, 0x48, 0x44, 0x44, 0x38 });
            CharDic.Add('c', new byte[] { 0x38, 0x44, 0x44, 0x44, 0x20 });
            CharDic.Add('d', new byte[] { 0x38, 0x44, 0x44, 0x48, 0x7F });
            CharDic.Add('e', new byte[] { 0x38, 0x54, 0x54, 0x54, 0x18 });
            CharDic.Add('f', new byte[] { 0x08, 0x7E, 0x09, 0x01, 0x02 });
            CharDic.Add('g', new byte[] { 0x08, 0x14, 0x54, 0x54, 0x3C });
            CharDic.Add('h', new byte[] { 0x7F, 0x08, 0x04, 0x04, 0x78 });
            CharDic.Add('i', new byte[] { 0x00, 0x44, 0x7D, 0x40, 0x00 });
            CharDic.Add('j', new byte[] { 0x20, 0x40, 0x44, 0x3D, 0x00 });
            CharDic.Add('k', new byte[] { 0x00, 0x7F, 0x10, 0x28, 0x44 });
            CharDic.Add('l', new byte[] { 0x00, 0x41, 0x7F, 0x40, 0x00 });
            CharDic.Add('m', new byte[] { 0x7C, 0x04, 0x18, 0x04, 0x78 });
            CharDic.Add('n', new byte[] { 0x7C, 0x08, 0x04, 0x04, 0x78 });
            CharDic.Add('o', new byte[] { 0x38, 0x44, 0x44, 0x44, 0x38 });
            CharDic.Add('p', new byte[] { 0x7C, 0x14, 0x14, 0x14, 0x08 });
            CharDic.Add('q', new byte[] { 0x08, 0x14, 0x14, 0x18, 0x7C });
            CharDic.Add('r', new byte[] { 0x7C, 0x08, 0x04, 0x04, 0x08 });
            CharDic.Add('s', new byte[] { 0x48, 0x54, 0x54, 0x54, 0x20 });
            CharDic.Add('t', new byte[] { 0x04, 0x3F, 0x44, 0x40, 0x20 });
            CharDic.Add('u', new byte[] { 0x3C, 0x40, 0x40, 0x20, 0x7C });
            CharDic.Add('v', new byte[] { 0x1C, 0x20, 0x40, 0x20, 0x1C });
            CharDic.Add('w', new byte[] { 0x3C, 0x40, 0x30, 0x40, 0x3C });
            CharDic.Add('x', new byte[] { 0x44, 0x28, 0x10, 0x28, 0x44 });
            CharDic.Add('y', new byte[] { 0x0C, 0x50, 0x50, 0x50, 0x3C });
            CharDic.Add('z', new byte[] { 0x44, 0x64, 0x54, 0x4C, 0x44 });
            CharDic.Add('ä', new byte[] { 0x20, 0x55, 0x54, 0x55, 0x78 });
            CharDic.Add('ö', new byte[] { 0x3A, 0x44, 0x44, 0x3A, 0x00 });
            CharDic.Add('ü', new byte[] { 0x3A, 0x40, 0x40, 0x3A, 0x00 });
            CharDic.Add('{', new byte[] { 0x00, 0x08, 0x36, 0x41, 0x00 });
            CharDic.Add('|', new byte[] { 0x00, 0x00, 0x7F, 0x00, 0x00 });
            CharDic.Add('}', new byte[] { 0x00, 0x41, 0x36, 0x08, 0x00 });
            CharDic.Add('€', new byte[] { 0x14, 0x3E, 0x55, 0x41, 0x22 });
            CharDic.Add('°', new byte[] { 0x00, 0x00, 0x07, 0x05, 0x07 });
        }
        public bool MonoSpace => true;

        public byte Width => 5;

        public byte Height => 7;

        public IReadOnlyDictionary<char, byte[]> FontData => CharDic;
    }
}
